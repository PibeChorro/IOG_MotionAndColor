%% GENERAL FUNCTION AND MONITOR SETUP:

% First of all, the code aims to create a function IOGMotionMain, which
% sets input value to "setUp", which is the chosen setup monitor.
% Then, ptb, a variable created is set to take the value of
% PTBSettingsIOGMotion of the setUp chosen. a try/catch loop is presented
% here in case there is an error in choosing the setup and the monitor
% settings for debugging purposes.

%% DESIGN OF THE STIMULI, THE MONDREAN MASKS AND THE FIXATION CROSS: 

% The code then sets different features and sizes of the design of
% the stimulus for the experiment (two gratings in each eye, one grating
% having one horizontal and one vertival grating, and the other one the
% same).
% Also importantly, designing the Mondrean masks that will surround the
% gratings stimuli to in a rectangular manner.

% Creation of the fixation cross at the center of each grating, with their
% position, size, and color in relation to the gratings and the screen
% monitor.

%% INSTRUCTIONS AND FUSION TEST:


% Then, we open a series of windows for experimental instructions based on another script's function that
% was defined, with a try/catch loop to rethrow an error in case there is
% one.

% Then, another try/catch loop is displayed for another script's function
% that creates the fusion test before the actual experiment.

%% READING DATA FROM EXCEL FILES TO COUNTERBALANCE DIFFERENT CONDITIONS (MOTION DIRECTION, COLOR, AND ORIENTATION).

% First, we assign a variable called "data" to a "readtable" function that
% reads the file (-- to be changed) that has the different conditions with
% different motion directions of the gratings and orientations and colors
% for four runs (four trials each).

% Then, we create another variable called orientations which is takes the
% values from the excel file (1 and 2 as Horizontal and Vertical,
% respectively, and checks whether all other columns in the file has an assigned orientation value).

% Then, making a uniqueRuns variable wouldn't make sense and is redundant
% since we would have separate files for each run in which we could iterate
% over and would be helpful so that if an error occurs during experimental
% data collection let's say in Run 2, then the data of Run 1 wouldn't be
% lost. Therefore, in this case, a "for" loop for the different runs would not be
% necessary.

%% CREATION OF A REPETITION MATRIX FOR MOTION SIMULATION

% We assign a variable x to create a repetition matrix containing 314 rows
% and 314 columns, and in each row there are values ranging from 1 to 314
% throughout the columns.

% Using the x variable, we create two alphamasks that are Mondrian masks,
% first by assigning the first mask to a repetition matrix in the size of x
% and filling it with zero values, and doing the same for the second mask.

%% COUNTERBALANCING ORDER OF CONDITIONS

% Before the start of the actual while loop with the differen



